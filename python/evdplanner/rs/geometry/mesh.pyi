import numpy as np
from evdplanner.rs import Intersection, IntersectionSort, Ray, Vec3
from evdplanner.rs.geometry import Bvh

class Triangle:
    a: int
    b: int
    c: int
    normal: Vec3
    area: float

class Mesh:
    origin: Vec3
    def __init__(
        self, origin: Vec3, vertices: list[Vec3], triangles: list[tuple[int, int, int]]
    ) -> None: ...
    @staticmethod
    def load(path: str, num_samples: int = 10_000) -> "Mesh": ...
    def save(self, path: str) -> None: ...
    def recalculate_normals(self) -> None: ...
    def recalculate_areas(self) -> None: ...
    def recalculate_origin(self, num_samples: int = 1_000_000) -> None: ...
    def intersect(
        self, ray: Ray, sorting: IntersectionSort, epsilon: float = 1e-8
    ) -> Intersection | None: ...
    def triangles_as_vertex_array(self) -> np.ndarray: ...
    def laplacian_smooth(self, iterations: int = 10, smoothing_factor: float = 0.5) -> None: ...
    @property
    def num_triangles(self) -> int: ...
    @property
    def num_vertices(self) -> int: ...
    @property
    def surface_area(self) -> float: ...
    @property
    def volume(self) -> float: ...
    @property
    def bounding_box(self) -> tuple[Vec3, Vec3]: ...
